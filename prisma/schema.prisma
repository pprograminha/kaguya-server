datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id
  name String?
  email String @unique
  avatar String?
  user_roles UserRole[]
  user_playlists UserPlaylist[]
  user_trails UserTrail[]
  user_classes UserClass[]
  user_blocks UserBlock[]
  username String @unique
  enabled Boolean @default(true)
  password String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("users")
}

model UserRole {
  id String @id
  user_id String
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("user_roles")
}

model Role {
  id String @id
  name String @unique
  user_roles  UserRole[]
  permission Int  @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("roles")
}

model UserTrail {
  id String @id
  user_id String
  trail_id String
  trail Trail @relation(fields: [trail_id], references: [id], onDelete: Cascade)
  user_playlists UserPlaylist[]
  trail_progress_percentage Int @default(0)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("user_trails")
}

model Trail {
  id String @id
  name String
  description String
  playlists Playlist[]
  user_trails UserTrail[]
  user_playlists UserPlaylist[]
  avatar String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("trails")
}

model Playlist {
  id String @id
  avatar String?
  name String
  description String
  trail_id String
  blocks Block[]
  user_blocks UserBlock[]
  trail Trail @relation(fields: [trail_id], references: [id], onDelete: Cascade)
  user_playlists UserPlaylist[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("playlists")
}

model UserPlaylist {
  id String @id
  playlist_progress_percentage Int @default(0)
  user_id String
  trail_id String
  playlist_id String
  user_trail_id String
  user_blocks UserBlock[]
  trail Trail @relation(fields: [trail_id], references: [id], onDelete: Cascade)
  user_trail UserTrail @relation(fields: [user_trail_id], references: [id], onDelete: Cascade)
  user User @relation(fields:[user_id], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields:[playlist_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  @@map("user_playlists")
}

model Class {
  id String @id
  name String
  description String
  link String
  block Block @relation(fields: [block_id], references: [id], onDelete: Cascade)
  block_id String
  articles Article[]
  user_classes UserClass[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("classes")
}

model UserClass {
  id String @id
  completed Boolean
  user_block_id String
  user_block UserBlock @relation(fields: [user_block_id], references: [id], onDelete: Cascade)
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  block Block @relation(fields: [block_id], references: [id], onDelete: Cascade)
  block_id String
  class_id String
  class Class @relation(fields: [class_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("user_classes")
}

model Block {
  id String @id
  name String
  classes Class[]
  playlist Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  playlist_id String
  user_classes UserClass[]
  user_blocks UserBlock[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("blocks")
}

model UserBlock {
  id String @id
  playlist_progress_percentage Int @default(0)
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_playlist_id String
  user_playlist UserPlaylist @relation(fields: [user_playlist_id], references: [id], onDelete: Cascade)
  user_classes UserClass[]
  playlist Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  playlist_id String
  block_id String
  block Block @relation(fields: [block_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("user_blocks")
}

model Article {
  id String @id
  description String
  link String
  class Class @relation(fields: [class_id], references: [id], onDelete: Cascade)
  class_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("articles")
}
