datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id
  name           String?
  email          String         @unique
  avatar         String?
  user_roles     UserRole[]
  user_playlists UserPlaylist[]
  user_trails    UserTrail[]
  user_lessons   UserLesson[]
  user_blocks    UserBlock[]
  likes          Like[]
  dislikes       DisLike[]
  views          View[]
  histories      History[]
  username       String         @unique
  enabled        Boolean        @default(true)
  password       String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("users")
}

model UserRole {
  id         String   @id
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_roles")
}

model Role {
  id         String     @id
  name       String     @unique
  user_roles UserRole[]
  permission Int        @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("roles")
}

model UserTrail {
  id         String   @id
  user_id    String
  trail_id   String
  trail      Trail    @relation(fields: [trail_id], references: [id], onDelete: Cascade)
  progress   Int      @default(0)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  enabled    Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_trails")
}

model Trail {
  id             String         @id
  name           String
  slug           String         @unique
  description    String
  playlists      Playlist[]
  user_trails    UserTrail[]
  user_playlists UserPlaylist[]
  avatar         String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("trails")
}

model Playlist {
  id             String         @id
  avatar         String?
  name           String
  slug           String
  description    String
  trail_id       String
  blocks         Block[]
  user_blocks    UserBlock[]
  trail          Trail          @relation(fields: [trail_id], references: [id], onDelete: Cascade)
  user_playlists UserPlaylist[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@map("playlists")
}

model UserPlaylist {
  id          String   @id
  progress    Int      @default(0)
  user_id     String
  trail_id    String
  playlist_id String
  trail       Trail    @relation(fields: [trail_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("user_playlists")
}

model Lesson {
  id           String       @id
  name         String
  slug         String
  description  String
  link         String
  block        Block        @relation(fields: [block_id], references: [id], onDelete: Cascade)
  block_id     String
  articles     Article[]
  user_lessons UserLesson[]
  dislikes     DisLike[]
  likes        Like[]
  views        View[]
  histories    History[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@map("lessons")
}

model UserLesson {
  id         String   @id
  completed  Boolean
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  block      Block    @relation(fields: [block_id], references: [id], onDelete: Cascade)
  block_id   String
  lesson_id  String
  lesson     Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_lessons")
}

model Block {
  id           String       @id
  name         String
  slug         String
  lessons      Lesson[]
  playlist     Playlist     @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  playlist_id  String
  user_lessons UserLesson[]
  user_blocks  UserBlock[]
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@map("blocks")
}

model UserBlock {
  id          String   @id
  progress    Int      @default(0)
  user_id     String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  playlist_id String
  block_id    String
  block       Block    @relation(fields: [block_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("user_blocks")
}

model Like {
  id         String   @id
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  lesson_id  String
  lesson     Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("likes")
}

model View {
  id         String   @id
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  lesson_id  String
  lesson     Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("views")
}

model DisLike {
  id         String   @id
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  lesson_id  String
  lesson     Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("dislikes")
}

model History {
  id         String   @id
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  lesson_id  String
  recent_at  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("histories")
}

model Article {
  id          String   @id
  description String
  link        String
  lesson      Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  lesson_id   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("articles")
}
